<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Go Procedural:Houdini VEX Attribute Wrangle</title>
      <link href="/go-procedural-houdini-vex-usage/"/>
      <url>/go-procedural-houdini-vex-usage/</url>
      <content type="html"><![CDATA[<p>To use vex in houdini, enter geometry network, right click or hit tab key , then search and select <code>Attribute Wrangle</code>.</p><h2 id="Run-Over-types"><a href="#Run-Over-types" class="headerlink" title="Run Over types"></a>Run Over types</h2><p>Each type except Detail(only once) automatically supports threading and parallel computation.</p><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Desc</th><th style="text-align:left">Binding Attributes</th></tr></thead><tbody><tr><td style="text-align:left">Detail</td><td style="text-align:left">The code will run only once.</td><td style="text-align:left">Detail Attributes</td></tr><tr><td style="text-align:left">Primitives</td><td style="text-align:left">The code will run on each Primitive.</td><td style="text-align:left">@primnum, @numprim</td></tr><tr><td style="text-align:left">Points</td><td style="text-align:left">The code will run on each Primitive.</td><td style="text-align:left">@ptnum, @numpt</td></tr><tr><td style="text-align:left">Vertices</td><td style="text-align:left">The code will run on each Primitive.</td><td style="text-align:left">@vtxnum, @numvtx</td></tr><tr><td style="text-align:left">Numbers</td><td style="text-align:left">The code will run specified times.</td><td style="text-align:left">@elemnum,@numelem, Readonly Detail Attributes</td></tr></tbody></table><a id="more"></a><h2 id="CRUD-Attributes"><a href="#CRUD-Attributes" class="headerlink" title="CRUD Attributes"></a>CRUD Attributes</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p><code>int  addattrib(int geohandle, string attribclass, string name, &lt;type&gt;defvalue)</code></p><p>adddetailattrib<br>addprimattrib<br>addpointattrib<br>addvertexattrib</p><h3 id="Retrive"><a href="#Retrive" class="headerlink" title="Retrive"></a>Retrive</h3><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2>]]></content>
      
      <categories>
          
          <category> software </category>
          
          <category> houdini </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> vex </tag>
            
            <tag> attribute </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go Procedural:Houdini VEX Baiscs</title>
      <link href="/go-procedural-houdini-vex/"/>
      <url>/go-procedural-houdini-vex/</url>
      <content type="html"><![CDATA[<p>Use vex to manipulate geometry in Sop node <code>Attribute Wrangle</code>.</p><p>Note：This article does not cover the use of shader</p><a id="more"></a><h2 id="Basic-types"><a href="#Basic-types" class="headerlink" title="Basic types"></a>Basic types</h2><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Example</th><th style="text-align:center">Attribute Syntax</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left"><code>21, -3, 0x31, 0b1001, 0212, 1_000_000</code></td><td style="text-align:center">i@name</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left"><code>21.3, -3.2, 1.0, 0.000_000_1</code></td><td style="text-align:center">f@name</td></tr><tr><td style="text-align:left">vector2</td><td style="text-align:left"><code>{0,0}, {0.3,0.5}</code></td><td style="text-align:center">u@name</td></tr><tr><td style="text-align:left">vector</td><td style="text-align:left"><code>{0,0,0}, {0.3,0.5,-0.5}</code></td><td style="text-align:center">v@name</td></tr><tr><td style="text-align:left">vector4</td><td style="text-align:left"><code>{0,0,0,1}, {0.3,0.5,-0.5,0.2}</code></td><td style="text-align:center">p@name</td></tr><tr><td style="text-align:left">array</td><td style="text-align:left"><code>{ 1, 2, 3, 4, 5, 6, 7, 8 }</code></td><td style="text-align:center">type[]@name</td></tr><tr><td style="text-align:left">struct</td><td style="text-align:left"><code>struct Transform {vector p, r, s; } Transform t = { {0,0,0},{0,0,0},{1,1,1} };</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">matrix2</td><td style="text-align:left"><code>{ {1,0}, {0,1} }</code></td><td style="text-align:center">2@name</td></tr><tr><td style="text-align:left">matrix3</td><td style="text-align:left"><code>{ {1,0,0}, {0,1,0}, {0,0,1} }</code></td><td style="text-align:center">3@name</td></tr><tr><td style="text-align:left">matrix</td><td style="text-align:left"><code>{ {1,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,1} }</code></td><td style="text-align:center">4@name</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left"><code>&quot;hello world&quot;</code></td><td style="text-align:center">s@name</td></tr></tbody></table><h3 id="Accessing-geometry-attributes"><a href="#Accessing-geometry-attributes" class="headerlink" title="Accessing geometry attributes"></a>Accessing geometry attributes</h3><p>Read or write the value of an attribute using <code>@attribute_name</code> if it’s a <strong>known attributes</strong>. Otherwise a custom defined attribute should define the type first, or it’s a float as default.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@foo; <span class="comment">// float</span></span><br><span class="line">v@bar <span class="comment">// vector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// defined in last node;</span></span><br><span class="line">v@rest_P = @P; </span><br><span class="line"></span><br><span class="line"><span class="comment">////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// used in next node:</span></span><br><span class="line"><span class="comment">// @P = @rest_P; // error, rest_p is float as default.</span></span><br><span class="line">@P = v@rest_P <span class="comment">// correct.</span></span><br></pre></td></tr></table></figure></p><p>The following table lists <strong>known attributes</strong> that are automatically cast.</p><table><thead><tr><th style="text-align:left">VEX type</th><th style="text-align:left">Attribute names</th></tr></thead><tbody><tr><td style="text-align:left">vector (3 floats)</td><td style="text-align:left">@P, @accel, @center, @dPdx,  @dPdy, @dPdz, @Cd, @N, @scale, @force, @rest, @torque, @up, @uv, @v</td></tr><tr><td style="text-align:left">vector4 (4 floats)</td><td style="text-align:left">@backtrack, @orient, @rot</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">@id, @ix, @iy, @iz, @nextid, @pstate, @resx, @resy, @resz, @ptnum, @vtxnum, @primnum, @numpt, @numvtx, @numprim, @group_*</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">@name, @instance</td></tr></tbody></table><h3 id="Accessing-globals"><a href="#Accessing-globals" class="headerlink" title="Accessing globals"></a>Accessing globals</h3><table><thead><tr><th style="text-align:left">Variable</th><th style="text-align:left">Describe</th></tr></thead><tbody><tr><td style="text-align:left">@Time</td><td style="text-align:left">Float time ($T)</td></tr><tr><td style="text-align:left">@Frame</td><td style="text-align:left">Float frame ($FF)</td></tr><tr><td style="text-align:left">@SimTime</td><td style="text-align:left">Float simulation time ($ST), only present in DOP contexts.</td></tr><tr><td style="text-align:left">@SimFrame</td><td style="text-align:left">Float simulation frame ($SF), only present in DOP contexts.</td></tr><tr><td style="text-align:left">@TimeInc</td><td style="text-align:left">Float time step (1/$FPS)</td></tr></tbody></table><h3 id="Accessing-individual-components-of-a-vector-matrix-or-struct"><a href="#Accessing-individual-components-of-a-vector-matrix-or-struct" class="headerlink" title="Accessing individual components of a vector, matrix or struct"></a>Accessing individual components of a vector, matrix or struct</h3><table><thead><tr><th style="text-align:left">0</th><th style="text-align:left">1</th><th style="text-align:left">2</th><th style="text-align:left">3</th></tr></thead><tbody><tr><td style="text-align:left">u</td><td style="text-align:left">v</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">y</td><td style="text-align:left">z</td><td style="text-align:left">w</td></tr><tr><td style="text-align:left">r</td><td style="text-align:left">g</td><td style="text-align:left">b</td><td style="text-align:left">a</td></tr></tbody></table><p>Examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@uv.u, @uv.v;</span><br><span class="line">@P.x, @P.y, @P.z;</span><br><span class="line">@Cd.r, @Cd.g, @Cd.b;</span><br><span class="line">v.xxx == set(v[0], v[0], v[0])</span><br><span class="line">c.bgra == set(c[2], c[1], c[0], c[3])</span><br></pre></td></tr></table></figure></p><h3 id="Assign-value"><a href="#Assign-value" class="headerlink" title="Assign value"></a>Assign value</h3><p>Use <code>{}</code> to composite with only literal value, use <code>set()</code> to composite with variable.<br>Examples:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> v;</span><br><span class="line">v = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span> v2 = v;</span><br><span class="line"><span class="comment">//vector v3 = &#123;0, v2.y, 0&#125;; // error</span></span><br><span class="line"><span class="built_in">vector</span> v3 = <span class="built_in">set</span>(<span class="number">0</span>, v2.y, <span class="number">0</span>);</span><br><span class="line">matrix3 m1 = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">matrix3 m2 = <span class="built_in">set</span>(&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;, v, &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="Declaring-array-types"><a href="#Declaring-array-types" class="headerlink" title="Declaring array types"></a>Declaring array types</h3><p>To declare an array variable, the general form is <code>member_type var_name[]</code>:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span>   my_array[];</span><br><span class="line"><span class="comment">// v is a single vector, vector_array is an array of vectors</span></span><br><span class="line"><span class="built_in">vector</span>  v, vector_array[];</span><br><span class="line"><span class="built_in">string</span>  str_array[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// To specify a literal array, use curly braces, with the array members separated by commas:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> an_array[] = &#123; &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>[] rgb_array()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//If you specify scalars where a vector is expected, the compiler assigns the scalar value to all components of the vector:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> an_array[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// an_array[] == &#123; &#123;1, 1, 1&#125;, &#123;2, 2, 2&#125;, &#123;3, 3, 3&#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//The array() function creates an array from its arguments.</span></span><br><span class="line"><span class="keyword">int</span> my_array[] = <span class="built_in">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//You can use array() to generate an array of any type. To force array() to generate vectors (for example):</span></span><br><span class="line"></span><br><span class="line">v[]@attr_name = <span class="built_in">vector</span>[](<span class="built_in">array</span>(value1, value2, ...));</span><br></pre></td></tr></table></figure></p><h3 id="Accessing-and-setting-array-values"><a href="#Accessing-and-setting-array-values" class="headerlink" title="Accessing and setting array values"></a>Accessing and setting array values</h3><p>Use <code>arrayname[index]</code> to look up a value by its position in the array.<br>Python-style indexing is used. This means negative indices refer to positions from the end of the array.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nums[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> n = nums[<span class="number">10</span>];  <span class="comment">// Returns 0</span></span><br><span class="line"><span class="keyword">int</span> b = nums[<span class="number">-2</span>];  <span class="comment">// Returns 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> strs[] = &#123; &#125;;</span><br><span class="line"><span class="built_in">string</span> s = strs[<span class="number">20</span>];  <span class="comment">// Returns ""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//You can also assign values using the square brackets notation:</span></span><br><span class="line"><span class="keyword">float</span> nums[] = &#123; &#125;;</span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h3 id="Slicing-Arrays"><a href="#Slicing-Arrays" class="headerlink" title="Slicing Arrays"></a>Slicing Arrays</h3><p>The square-brackets can be used to extract sub-arrays using the Python slicing notation.<code>str_name[start:end:step]</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> nums[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> start[] = nums[<span class="number">0</span>:<span class="number">2</span>];  <span class="comment">// &#123; 0, 1 &#125;</span></span><br><span class="line"><span class="keyword">int</span> end[] = nums[<span class="number">-2</span>:];  <span class="comment">// &#123; 4, 5 &#125;</span></span><br><span class="line"><span class="keyword">int</span> rev[] = nums[::<span class="number">-1</span>];  <span class="comment">// &#123; 5, 4, 3, 2, 1, 0 &#125;</span></span><br><span class="line"><span class="keyword">int</span> odd[] = nums[<span class="number">1</span>::<span class="number">2</span>]; <span class="comment">// &#123; 1, 3, 5 &#125;</span></span><br></pre></td></tr></table></figure></p><p>The slice function is the equivalent for using the slice-based square brackets notation.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;[] slice(&lt;type&gt;s[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span><br><span class="line">&lt;type&gt;[] slice(&lt;type&gt;s[], <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> step)</span><br><span class="line"><span class="comment">// Extracts a sub-array from a larger array.</span></span><br><span class="line"><span class="function"><span class="built_in">string</span>  <span class="title">slice</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> hasstart, <span class="keyword">int</span> start, <span class="keyword">int</span> hasend, <span class="keyword">int</span> end, <span class="keyword">int</span> hasstep, <span class="keyword">int</span> step)</span></span></span><br><span class="line">&lt;type&gt;[] slice(&lt;type&gt;array[], int hasstart, int start, int hasend, int end, int hasstep, int step)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Examples</span></span><br><span class="line"><span class="keyword">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>&#125;;</span><br><span class="line">slice(nums, <span class="number">1</span>, <span class="number">3</span>) == &#123;<span class="number">20</span>, <span class="number">30</span>&#125;;  <span class="comment">// nums[1:3]</span></span><br><span class="line">slice(nums, <span class="number">1</span>, <span class="number">-1</span>) == &#123;<span class="number">20</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;  <span class="comment">// nums[1:-1]</span></span><br><span class="line">slice(nums, <span class="number">0</span>, len(nums), <span class="number">2</span>) == &#123;<span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>&#125;;  <span class="comment">// nums[0:len(nums):2]</span></span><br><span class="line">slice(nums, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) == &#123;<span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>&#125;;  <span class="comment">// nums[::2]</span></span><br></pre></td></tr></table></figure><h3 id="Looping-over-an-array"><a href="#Looping-over-an-array" class="headerlink" title="Looping over an array"></a>Looping over an array</h3><p>Use <code>foreach</code>.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">foreach ([element_type] value; <span class="built_in">array</span>) statement;</span><br><span class="line">foreach (index, value; <span class="built_in">array</span>) statement;</span><br><span class="line">foreach (<span class="keyword">int</span> index; element_type value; <span class="built_in">array</span>) statement;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> days[] = &#123; <span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thu"</span>, <span class="string">"Fri"</span> &#125;;</span><br><span class="line"></span><br><span class="line">foreach (<span class="built_in">string</span> name; days) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> name2;</span><br><span class="line">foreach (name2; days) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, name2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach (<span class="keyword">int</span> i; <span class="built_in">string</span> name3; days) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Day number %d is %s.\n"</span>, i, name3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index; <span class="built_in">string</span> name4;</span><br><span class="line">foreach (index, name4; days) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Day number %d is %s.\n"</span>, index, name4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Useful-functions"><a href="#Useful-functions" class="headerlink" title="Useful functions"></a>Useful functions</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">len(arr);                       <span class="comment">// 5</span></span><br><span class="line">append(arr, <span class="number">8</span>);                 <span class="comment">// == push</span></span><br><span class="line"><span class="comment">//push(arr, 8);                 // arr == &#123;3, 5, 6, 7, 4, 8&#125;</span></span><br><span class="line">insert(arr, <span class="number">1</span>, <span class="number">2</span>);              <span class="comment">// arr == &#123;3, 2, 5, 6, 7, 4, 8&#125;</span></span><br><span class="line"><span class="keyword">int</span> arr2[] = sort(arr);         <span class="comment">// arr2 == &#123;2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="keyword">int</span> arr3[] = argsort(arr);      <span class="comment">// arr3 == &#123;1, 0, 5, 2, 3, 4, 6&#125;</span></span><br><span class="line"><span class="keyword">int</span> arr4[] = reorder(arr, arr3);<span class="comment">// arr4 == arr2;</span></span><br><span class="line"><span class="keyword">int</span> arr5[] = reverse(arr);      <span class="comment">// arr5 == &#123;8, 4, 7, 6, 5, 2, 3&#125;</span></span><br><span class="line">isvalidindex(arr, <span class="number">3</span>);           <span class="comment">// 1</span></span><br><span class="line">isvalidindex(arr, <span class="number">30</span>);          <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">int</span> v1 = pop(arr);              <span class="comment">// v1 == 8, arr == &#123;3, 2, 5, 6, 7, 4&#125;</span></span><br><span class="line"><span class="keyword">int</span> v2 = pop(arr, <span class="number">2</span>);           <span class="comment">// == removeindex</span></span><br><span class="line"><span class="comment">//int v2 = removeindex(arr, 2); // v2 == 5, arr == &#123;3, 2, 6, 7, 4&#125;          </span></span><br><span class="line"><span class="keyword">int</span> v3 =  removevalue(arr, <span class="number">10</span>); <span class="comment">// v3 == 0;</span></span><br><span class="line"><span class="keyword">int</span> v4 =  removevalue(arr, <span class="number">4</span>);  <span class="comment">// v4 == 1, arr == &#123;3, 2, 6, 7&#125;</span></span><br><span class="line">resize(arr, <span class="number">8</span>);                 <span class="comment">// arr == &#123;3, 2, 6, 7, 0, 0, 0, 0&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> software </category>
          
          <category> houdini </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
            <tag> vex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go Procedural:Houdini简介</title>
      <link href="/go-procedural-houdini-intro/"/>
      <url>/go-procedural-houdini-intro/</url>
      <content type="html"><![CDATA[<h2 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h2><p>Houdini是一个先进的程序建模，动画，特效，模拟，渲染和合成软件包。</p><p>Houdini的威力基于程序化的工作流程。通过创建连接在一起的节点网络来描述完成任务的步骤。例如，创建一个盒子的节点可能会连接到一个挤出盒子的边的节点，然后连接到一个细分多边形的节点，再连接到编辑点位置的节点。这为你提供了极大的威力：<br><a id="more"></a></p><ul><li><p>你可以返回网络中的前一个节点，更改选择，更改设置或更换资产。这些更改会自动通过网络传递以更改最终结果。你永远不必通过撤销或重新开始工作来改变你之前做出的决定。</p></li><li><p>它鼓励快速成型。你不必为了探索想法而放弃工作，只需重用网络的某些部分或重新配置网络即可将其重构为产品级质量。</p></li><li><p>由于Houdini基于程序生成事物，因此它具有许多用于管理非常大型和复杂场景的工具，支持生成或加载模型并在渲染时添加细节，而不是将所有内容都保存在内存中。</p></li><li><p>你可以打包网络，并使用自定义界面将它们变成新工具，而无需编写任何代码。在Houdini中，这些工具被称为数字资产。</p></li></ul><h2 id="节点和网络"><a href="#节点和网络" class="headerlink" title="节点和网络"></a>节点和网络</h2><p>Houdini允许你使用货架工具在3D视图中工作，而不必担心节点和网络。但是，了解网络对于充分利用Houdini至关重要。</p><p><img src="/images/go-procedural-houdini-intro_img/network_editor.png" alt="network_editor"></p><p>Houdini的网络就像一台计算机的文件系统，网络就像文件夹，节点就像文件一样。节点可以是一个包含其他节点的子网络。</p><p>根网络包含一些预制的网络，例如<code>/geo</code>（“Scene”网络）和<code>/out</code>（渲染节点所在的位置）。网络有一个“类型”（如<code>geometry network</code>“ 或 “<code>dynamics network</code>”），用于控制可以放入网络的节点类型。</p><p>场景层级（<code>/geo</code>）包含诸如角色，道具和灯光之类的对象。几何对象是包含定义对象几何的几何节点的子网络。这种两级设计与Maya和3DS Max等其他软件包不同，它们的所有节点都位于同一层级。</p><p>场景层级还可以包含不表示场景中的对象的节点，它们纯粹是子网络。例如，当你设置仿真模拟时，定义仿真的节点位于场景层级的Dynamics子网内。</p><p>Houdini的用户界面分为不同类型的窗格，如3D查看器，网络编辑器和参数编辑器。每个窗格可以专注于不同的网络，但默认情况下，它们都设置为遵循相同的网络。</p><p>每个节点都有一个设置属性的界面，称为参数面板，你可以在参数编辑器窗格中编辑这些参数以更改节点的功能。</p><p><img src="/images/go-procedural-houdini-intro_img/parms.png" alt="parms"></p><p>节点有输入和输出。通过将一个节点的输出连接到另一个节点的输入，可以在节点之间创建关系。</p><p>在不同的网络类型中，连线可以有不同的含义。一般情况下表示由一个节点创建或处理的数据传递到下一个节点。但是在场景层级，连接对象节点将会建立父子关系。</p><h2 id="几何和属性"><a href="#几何和属性" class="headerlink" title="几何和属性"></a>几何和属性</h2><p>Houdini支持不同类型的几何图形，如<code>Polygons</code>(多边形)，<code>NURBS</code>(非均匀有理B样条曲线)和<code>Bézier</code>（贝塞尔曲面），<code>Geometric Primitives</code>(几何基元)如<code>circles</code>(圆环)和<code>Sphere</code>(球形)，以及<code>Metaball</code>(元球)。Houdini将任何这些类型的y一块几何形状都称为<code>Primitive</code>(基元)。例如，多边形面是基元，多边形曲线是基元，元球是基元。</p><p>这是一种不太理想的术语，因为一些“基元”具有可编辑的组件。例如，多边形面有点和顶点。</p><p>组成场景的大部分信息都存储在<code>Attributes</code>（属性）————一种存储在模型，基元，点和顶点中的隐藏数据。例如，Houdini在空间中显示的点的位置由其P（Position）属性定义。</p><p>你始终可以通过使用<code>Geometry Spreadsheet</code>（右键点击节点，选择Spreadsheet…）在Houdini中查看几何图形上的实际属性值。</p><p><img src="/images/go-procedural-houdini-intro_img/geometry_spreadsheet.png" alt="geometry_spreadsheet"></p><p>你还可以使用<code>visualizers</code>来可视化属性。</p>]]></content>
      
      <categories>
          
          <category> software </category>
          
          <category> houdini </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【UE4】使用RenderDoc来调试渲染</title>
      <link href="/ue4-using-renderdoc-to-debug-graphics/"/>
      <url>/ue4-using-renderdoc-to-debug-graphics/</url>
      <content type="html"><![CDATA[<p>RenderDoc（<span class="exturl" data-url="aHR0cHM6Ly9yZW5kZXJkb2Mub3JnLw==" title="https://renderdoc.org/">Official Site<i class="fa fa-external-link"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhbGR1cmsvcmVuZGVyZG9j" title="https://github.com/baldurk/renderdoc">Github<i class="fa fa-external-link"></i></span>）是一个图形渲染调试器，目前支持Window7-10和Linux上Vulkan、D3D11、D3D12和OpenGL的调试。通过使用RenderDoc，可以很方便的对我们的游戏渲染流程进行调试和分析。<br><a id="more"></a></p><h2 id="安装并启动RenderDoc"><a href="#安装并启动RenderDoc" class="headerlink" title="安装并启动RenderDoc"></a>安装并启动RenderDoc</h2><p>按照如下步骤操作：</p><ol><li>前往<span class="exturl" data-url="aHR0cHM6Ly9yZW5kZXJkb2Mub3JnL2J1aWxkcw==" title="https://renderdoc.org/builds">官方下载地址<i class="fa fa-external-link"></i></span>，下载并安装。</li><li>打开UE4编辑器，Edit-&gt;Plugins-&gt;Rendering-&gt;RenderDoc Plugin，勾选Enabled启用。</li><li>重启编辑器，即可在Viewport右上角看到如下图的新按钮。<img src="/images/ue4-using-renderdoc-to-debug-graphics_img/viewport-icon.png" alt="ViewportIcon"></li><li>点击该按钮即可打开RenderDoc并自动捕获下一帧。</li><li>双击即可打开并查看捕获到的渲染帧信息。</li><li>点击Trigger即可捕获新的渲染帧。</li></ol><h2 id="开启UE4的Shader调试"><a href="#开启UE4的Shader调试" class="headerlink" title="开启UE4的Shader调试"></a>开启UE4的Shader调试</h2><p>在使用RenderDoc的时候查看Shader会看到汇编代码片段，想看到源代码需要进行如下操作：</p><ol><li>找到并打开<code>Engine\Config\ConsoleVariables.ini</code>。</li><li><p>取消注释如下两行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.Shaders.Optimize=0</span><br><span class="line">r.Shaders.KeepDebugInfo=1</span><br></pre></td></tr></table></figure></li><li><p>重启引擎。</p></li></ol>]]></content>
      
      <categories>
          
          <category> ue4 </category>
          
          <category> debug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ue4 </tag>
            
            <tag> renderdoc </tag>
            
            <tag> debug </tag>
            
            <tag> graphics </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【UE4】避免因为某些ini配置变动而重新Cook资源</title>
      <link href="/ue4-avoid-recook-when-ini-changes/"/>
      <url>/ue4-avoid-recook-when-ini-changes/</url>
      <content type="html"><![CDATA[<p>最近经常打包，发现每次打包资源都全部重新Cook了，这对工作效率影响很大，原因包括我们在打包流程中自动修改了ini文件来配置版本号等。不经过配置的引擎会在ini进行变动的时候清理掉原有Cook过的内容。因此需要通过一系列配置，以保证每次Cook的内容是增量的，来加快工作进度。</p><a id="more"></a><p>首先要使增量Cook生效，必须在构建命令中加入<code>-iterate</code>，否则在每次Cook前会将Cook产物文件夹整个删除。<br>然后需要在<code>DefaultEditor.ini</code>文件中加入类似如下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[CookSettings]</span></span><br><span class="line">+ConfigSettingBlacklist=*.Engine:/Script/IOSRuntimeSettings.IOSRuntimeSettings:VersionInfo</span><br><span class="line">+ConfigSettingBlacklist=*.Engine:/Script/AndroidRuntimeSettings.AndroidRuntimeSettings:VersionDisplayName</span><br><span class="line">+ConfigSettingBlacklist=*.Engine:/Script/AndroidRuntimeSettings.AndroidRuntimeSettings:StoreVersion</span><br></pre></td></tr></table></figure><p>实际上是通过配置增加<code>ConfigSettingBlacklist</code>中的内容项来时引擎在Cook的时候忽略相关的配置字段。其格式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ConfigSettingBlacklist=BuildMachinePlatform.ConfigFile:SectionName:ValueName</span><br></pre></td></tr></table></figure></p><p>其中：</p><table><thead><tr><th>占位名</th><th>C++中的涵义</th><th>ini中的涵义</th><th>参考取值</th></tr></thead><tbody><tr><td><code>BuildMachinePlatform</code></td><td>N/A</td><td>构建机器的平台</td><td>取值可以为<code>Windows/Mac/Linux</code>等,支持Wildcard(<code>*</code>)。</td></tr><tr><td><code>ConfigFile</code></td><td>C++类中<code>UCLASS(config=Engine)</code>配置的内容</td><td><code>ini</code>文件名的后半段，即<code>Base、Default</code>等字样后面的部分</td><td><code>Engine/Game/Editor</code>等</td></tr><tr><td><code>SectionName</code></td><td>C++类所属的路径名(<code>Path/Of/Package.ClassPath</code>)</td><td>每个配置文件中方括号内的内容</td><td>略</td></tr><tr><td><code>ValueName</code></td><td>C++类中的变量名</td><td>配置文件中具体的配置里行首的名称</td><td>略，支持Wildcard(<code>*</code>)</td></tr></tbody></table><p>配置成功后，将会在下下次打包时生效。</p>]]></content>
      
      <categories>
          
          <category> ue4 </category>
          
          <category> cook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ue4 </tag>
            
            <tag> cook </tag>
            
            <tag> ini </tag>
            
            <tag> config </tag>
            
            <tag> long time </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文章目录</title>
      <link href="/index/"/>
      <url>/index/</url>
      <content type="html"><![CDATA[<p>制作一个游戏需要各种技术，本文按照工作流程分别总结了各种技术及经验，并归类形成目录。主要使用的工具是Houdini（程序化美术资源制作）、Blender（传统美术资源制作）、Substance Painter（贴图）、Unreal Engine 4（游戏引擎）。<br><a id="more"></a></p><h2 id="迈向程序化"><a href="#迈向程序化" class="headerlink" title="迈向程序化"></a>迈向程序化</h2><p>Houdini系列教程</p><ol><li><a href="/go-procedural-houdini-intro/">Go Procedural:Houdini简介</a></li><li><a href="/go-procedural-houdini-vex/">Go Procedural:Houdini Vex基础</a></li></ol><h2 id="传统美术"><a href="#传统美术" class="headerlink" title="传统美术"></a>传统美术</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h4><ol><li>基础建模</li><li>雕刻精细模型</li><li>重拓扑</li><li>模型减面</li></ol><h4 id="拆分UV"><a href="#拆分UV" class="headerlink" title="拆分UV"></a>拆分UV</h4><h4 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h4><ol><li><a href="/vertex-color">顶点颜色</a></li><li><a href="/how-to-bake-id-map">如何烘焙ID贴图（ID Map）</a></li><li>PBR</li><li>法线贴图</li></ol><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><h4 id="骨骼"><a href="#骨骼" class="headerlink" title="骨骼"></a>骨骼</h4><h4 id="蒙皮"><a href="#蒙皮" class="headerlink" title="蒙皮"></a>蒙皮</h4><h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><h4 id="变形动画"><a href="#变形动画" class="headerlink" title="变形动画"></a>变形动画</h4><h2 id="技术美术"><a href="#技术美术" class="headerlink" title="技术美术"></a>技术美术</h2><h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><h3 id="光照"><a href="#光照" class="headerlink" title="光照"></a>光照</h3><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h3 id="Cook"><a href="#Cook" class="headerlink" title="Cook"></a>Cook</h3><p><a href="/ue4-avoid-recook-when-ini-changes">【UE4】避免因为某些ini配置变动而重新Cook资源</a></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><a href="/ue4-using-renderdoc-to-debug-graphics">【Ue4】使用RenderDoc来调试渲染</a></p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p><a href="/ue4-dynamic-load-blueprint-class-from-path">【UE4】根据路径动态加载蓝图类的正确方式</a></p>]]></content>
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> index </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>烘焙ID贴图</title>
      <link href="/how-to-bake-id-map/"/>
      <url>/how-to-bake-id-map/</url>
      <content type="html"><![CDATA[<p>ID贴图（ID Map）的作用主要就是用来区分同一个模型中不同的区块，具体的用法查看此文。下面介绍几种不同的方式来烘焙ID贴图，用到的工具分别是Blender和Substance Painter。<br><a id="more"></a><br>在Blender中为模型赋予顶点颜色，请<a href="/vertex-color">参考此文</a>。操作前请确认UV已经拆分好，拆分UV请参考此文。</p><h2 id="使用顶点颜色，通过Blender烘焙"><a href="#使用顶点颜色，通过Blender烘焙" class="headerlink" title="使用顶点颜色，通过Blender烘焙"></a>使用顶点颜色，通过Blender烘焙</h2><ol><li>刷好顶点色</li><li>渲染器切换到<code>Blender Render</code></li><li>打开<code>Material</code>面板，为模型添加一个新材质</li><li><code>Material</code>面板 &gt; <code>Shading</code> &gt; 勾选<code>Shadeless</code></li><li><code>Material</code>面板 &gt; <code>Options</code> &gt; 勾选<code>Vertext Color Paint</code></li><li>打开<code>UV/Image</code>编辑器 &gt; 新建一个图像</li><li>打开<code>Render</code>面板 &gt; <code>Bake</code> &gt; 点击<code>Bake</code></li><li>保存烘焙好的图片</li></ol><h2 id="使用材质颜色，通过Blender烘焙"><a href="#使用材质颜色，通过Blender烘焙" class="headerlink" title="使用材质颜色，通过Blender烘焙"></a>使用材质颜色，通过Blender烘焙</h2><ol><li>渲染器切换到<code>Blender Render</code></li><li>在编辑模式下为不同的部位赋予不同的材质</li><li>给材质换上不同的颜色</li><li>打开<code>UV/Image</code>编辑器 &gt; 新建一个图像</li><li>打开<code>Render</code>面板 &gt; <code>Bake</code> &gt; <code>Bake Mode</code>项选择<code>Textures</code></li><li><code>Render</code>面板 &gt; <code>Bake</code> &gt; 点击<code>Bake</code></li><li>保存烘焙好的图片</li><li>删除多余的材质，只保留一个(如果尚未导出模型)</li></ol><h2 id="使用顶点颜色，通过Substance-Painter烘焙"><a href="#使用顶点颜色，通过Substance-Painter烘焙" class="headerlink" title="使用顶点颜色，通过Substance Painter烘焙"></a>使用顶点颜色，通过Substance Painter烘焙</h2><ol><li>刷好顶点色</li><li>导出模型</li><li>打开<code>Substance Painter</code>工程</li><li>找到<code>TextureSet Settings</code>面板</li><li>点击<code>Bake textures</code>按钮</li><li>勾选<code>ID</code></li><li><code>Color Source</code>选择<code>Vertex Color</code></li><li>点击<code>Bake modelname textures</code>按钮</li></ol><h2 id="使用材质颜色-模型的子对象，通过Substance-Painter烘焙"><a href="#使用材质颜色-模型的子对象，通过Substance-Painter烘焙" class="headerlink" title="使用材质颜色/模型的子对象，通过Substance Painter烘焙"></a>使用材质颜色/模型的子对象，通过Substance Painter烘焙</h2><p>这种方式和使用顶点颜色类似，不过数据源是材质颜色/模型的子对象等，需在第7步选择相应的<code>Color Source</code>即可。需要注意的是这几种方式使用的数据源是高模模型。</p>]]></content>
      
      <categories>
          
          <category> artist </category>
          
          <category> texture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> id map </tag>
            
            <tag> blender </tag>
            
            <tag> substance painter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>顶点颜色</title>
      <link href="/vertex-color/"/>
      <url>/vertex-color/</url>
      <content type="html"><![CDATA[<p>顶点颜色（Vertex Color）是很常见的概念，就是在模型顶点上指定的颜色。在实际情况中，由于多个面共用一个顶点，因此一个顶点的颜色取决于具体在哪个面上。由于顶点颜色数量少而产生的精度问题，顶点颜色常用于贴图、材质混合而不是直接用于模型颜色渲染。</p><a id="more"></a><p>我们有以下几种方式给模型赋予顶点颜色：</p><ol><li>在Blender中绘制顶点颜色。</li><li>在游戏引擎编辑器中，通过笔刷绘制顶点颜色。</li><li>在代码中赋予顶点颜色。</li></ol><p>除去第三种暂且不谈，前两种在实际应用中是非常常见的用法。</p><h2 id="在3D建模软件中绘制顶点颜色"><a href="#在3D建模软件中绘制顶点颜色" class="headerlink" title="在3D建模软件中绘制顶点颜色"></a>在3D建模软件中绘制顶点颜色</h2><p>在3d建模软件中绘制顶点颜色常用于将不同的部位刷成不同的颜色，以便于在其它流程中方便的区分材质。绘制好顶点颜色后又有几种不同的用法：</p><ol><li>直接导入引擎制作材质，用不同的顶点色区域应用到分层材质上。</li><li>烘焙出ID Map，用贴图采样区分区域并应用到分层材质上。</li><li>烘焙出ID Map，在Substance Painter中对材质图层应用蒙版。</li></ol><p>ID Map可以通过Vertex Color在Blender或者Substance Painter中烘焙。也可以通过纯色材质在Blender中烘焙，可以直接烘焙成贴图，或者烘焙到Vertex Color，不过这将会造成模型具有多个材质ID，烘焙完成后需要删除，比较麻烦。</p><h2 id="在UE4中用笔刷绘制顶点颜色"><a href="#在UE4中用笔刷绘制顶点颜色" class="headerlink" title="在UE4中用笔刷绘制顶点颜色"></a>在UE4中用笔刷绘制顶点颜色</h2><p>直接在引擎中用笔刷绘制颜色常见于关卡地图制作中，使用了顶点颜色来存储不同通道的图层信息。例如亮暗程度，粗糙度，图层混合Alpha值等。最常见的例子是制作路面的水坑，墙面的污泥、苔藓的混合等，配合高度图可以表现出很好的效果。</p>]]></content>
      
      <categories>
          
          <category> artist </category>
          
          <category> texture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vertex color </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VPS转移记录</title>
      <link href="/vps-transfer-logs/"/>
      <url>/vps-transfer-logs/</url>
      <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlub2RlLmNvbS8/cj0yYWYyNTA3NDgzYjFmNmEyYWMxMGZjOWY3NTdlNDNhYzFkNTIwNDc3" title="https://www.linode.com/?r=2af2507483b1f6a2ac10fc9f757e43ac1d520477">Linode<i class="fa fa-external-link"></i></span>有5美元的机器了，内存也比Vultlr大一些，于是决定切换到<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlub2RlLmNvbS8/cj0yYWYyNTA3NDgzYjFmNmEyYWMxMGZjOWY3NTdlNDNhYzFkNTIwNDc3" title="https://www.linode.com/?r=2af2507483b1f6a2ac10fc9f757e43ac1d520477">Linode<i class="fa fa-external-link"></i></span><del>东京2机房</del>，记录一下全部流程，以供日后参考。<br><a id="more"></a></p><h2 id="更新：因为一些原因，再次切换"><a href="#更新：因为一些原因，再次切换" class="headerlink" title="更新：因为一些原因，再次切换"></a>更新：因为一些原因，再次切换</h2><p>使用了整快硬盘切换，下次无需再部署环境了。</p><ol><li>两台机器同时开启救援模式。</li><li>通过 Lish 进入Linode 系统后，首先修改 root 密码:<code>passwd</code>。</li><li>输入 root 密码。</li><li><p>输入以下命令启动 SSH 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure></li><li><p>在旧机器上输入命令开始传输硬盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/sda | ssh root@123.45.67.89 <span class="string">"dd of=/dev/sda"</span></span><br></pre></td></tr></table></figure></li><li><p>传输完毕，重启即可。</p></li></ol><h2 id="配置VPS和一些服务"><a href="#配置VPS和一些服务" class="headerlink" title="配置VPS和一些服务"></a>配置VPS和一些服务</h2><p>系统还是习惯了Centos7，也不用来做开发，不打算换成Ubuntu了,不用学太多东西，毕竟也不是从事相关方面工作，专注核心内容吧。所以，以下内容及命令均基于Centos7。</p><h3 id="切换内核并开启BBR"><a href="#切换内核并开启BBR" class="headerlink" title="切换内核并开启BBR"></a>切换内核并开启BBR</h3><p>阅读<span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vNDg5Lmh0bWw=" title="https://teddysun.com/489.html">这篇博文<i class="fa fa-external-link"></i></span>按照说明进行操作，以下是部分摘抄。</p><h4 id="内核升级方法"><a href="#内核升级方法" class="headerlink" title="内核升级方法"></a>内核升级方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml kernel-ml-devel</span><br><span class="line">grub2-set-default 0</span><br><span class="line">/usr/sbin/update-grub</span><br></pre></td></tr></table></figure><p>完成后，去<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlub2RlLmNvbS8/cj0yYWYyNTA3NDgzYjFmNmEyYWMxMGZjOWY3NTdlNDNhYzFkNTIwNDc3" title="https://www.linode.com/?r=2af2507483b1f6a2ac10fc9f757e43ac1d520477">Linode<i class="fa fa-external-link"></i></span>后台把内核切换成Grub2，重启即可。</p><h4 id="开启并验证BBR"><a href="#开启并验证BBR" class="headerlink" title="开启并验证BBR"></a>开启并验证BBR</h4><p>使用root用户登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure></p><p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。输入以下命令验证是否成功安装最新内核并开启 TCP BBR：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure></p><p>查看内核版本，含有 4.9 就表示 OK 了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure></p><p>返回值一般为：<code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure></p><p>返回值一般为：<code>net.ipv4.tcp_congestion_control = bbr</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.core.default_qdisc</span><br></pre></td></tr></table></figure></p><p>返回值一般为：<code>net.core.default_qdisc = fq</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></p><p>返回值有 <code>tcp_bbr</code> 模块即说明bbr已启动。</p><h3 id="安装SS"><a href="#安装SS" class="headerlink" title="安装SS"></a>安装SS</h3><p>阅读<span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vMzQyLmh0bWw=" title="https://teddysun.com/342.html">这篇博文<i class="fa fa-external-link"></i></span>按照说明进行操作</p><h2 id="转移博客"><a href="#转移博客" class="headerlink" title="转移博客"></a>转移博客</h2><p>博客是基于静态网页的，整套系统依赖了nginx nodejs hexo git等，因此需要全部搭建好环境。</p><h3 id="安装OpenResty-nginx-lua"><a href="#安装OpenResty-nginx-lua" class="headerlink" title="安装OpenResty(nginx+lua)"></a>安装OpenResty(nginx+lua)</h3><h4 id="新建www用户"><a href="#新建www用户" class="headerlink" title="新建www用户"></a>新建www用户</h4><p>准备把博客网站之类的放在这个用户下管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser www</span><br><span class="line">groupadd www</span><br><span class="line">usermod -G www www</span><br></pre></td></tr></table></figure></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget readline-devel pcre-devel openssl-devel gcc curl</span><br></pre></td></tr></table></figure><h4 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h4><p>打开<span class="exturl" data-url="aHR0cDovL29wZW5yZXN0eS5vcmcvZW4vZG93bmxvYWQuaHRtbA==" title="http://openresty.org/en/download.html">OpenResty官方下载页面<i class="fa fa-external-link"></i></span>获取最新版的地址，以下具体文件名或路径以本次操作为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://openresty.org/download/openresty-1.11.2.2.tar.gz</span><br><span class="line">tar zxvf openresty-1.11.2.2.tar.gz</span><br><span class="line">cd openresty-1.11.2.2</span><br><span class="line">./configure --user=www --group=www --prefix=/usr/local --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-ipv6 --with-http_sub_module --with-pcre-jit --with-http_iconv_module -j4 &amp;&amp; make &amp;&amp; make install</span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx</span><br></pre></td></tr></table></figure></p><h4 id="设置服务和开机启动"><a href="#设置服务和开机启动" class="headerlink" title="设置服务和开机启动"></a>设置服务和开机启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/systemd/system</span><br><span class="line">vi nginx.service</span><br><span class="line">&lt;i&gt;&lt;Paste&gt;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Nginx an HTTP and reverse proxy server.</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/nginx</span><br><span class="line">ExecStop=/usr/local/bin/nginx -s stop</span><br><span class="line">ExecReload=/usr/local/bin/nginx -s reload</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">&lt;/Paste&gt;</span><br><span class="line">&lt;Esc&gt;&lt;:&gt;&lt;x&gt;&lt;Enter&gt;</span><br><span class="line">systemctl enable nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><h3 id="安装最新版本的git"><a href="#安装最新版本的git" class="headerlink" title="安装最新版本的git"></a>安装最新版本的git</h3><p>在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQvcmVsZWFzZXM=" title="https://github.com/git/git/releases">这个页面<i class="fa fa-external-link"></i></span>找到最新版地址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/git/git/archive/v2.11.1.tar.gz</span><br><span class="line">mv v2.11.1.tar.gz git-v2.11.1.tar.gz</span><br><span class="line">yum remove git</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/git/bin/git /usr/<span class="built_in">local</span>/bin/git</span><br></pre></td></tr></table></figure></p><h4 id="新建git用户和组"><a href="#新建git用户和组" class="headerlink" title="新建git用户和组"></a>新建git用户和组</h4><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><h4 id="安装Node-Version-Manager"><a href="#安装Node-Version-Manager" class="headerlink" title="安装Node Version Manager"></a>安装Node Version Manager</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | NVM_DIR=/usr/<span class="built_in">local</span>/nvm bash</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="安装Node-Lts-version"><a href="#安装Node-Lts-version" class="headerlink" title="安装Node Lts version"></a>安装Node Lts version</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install --lts</span><br><span class="line">nvm use --lts</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="转移HTTPS证书和DNS-ip"><a href="#转移HTTPS证书和DNS-ip" class="headerlink" title="转移HTTPS证书和DNS ip"></a>转移HTTPS证书和DNS ip</h3><p>先在DNS服务商那里转移ip。<br>按照<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLndhbGtjZC5jb20vbGV0cy1lbmNyeXB0Lw==" title="https://blog.walkcd.com/lets-encrypt/">这篇文章<i class="fa fa-external-link"></i></span>重新安装lets-encrypt,并申请证书。<br>添加dhparam。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl dhparam -out /home/www/dhparam.pem 2048</span><br></pre></td></tr></table></figure></p><p>完毕后转移nginx配置文件按照原路径到新vps下</p><h3 id="安装Gogs-A-painless-self-hosted-Git-service"><a href="#安装Gogs-A-painless-self-hosted-Git-service" class="headerlink" title="安装Gogs(A painless self-hosted Git service)"></a>安装Gogs(A painless self-hosted Git service)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.gogs.io/gogs_v0.9.141_linux_amd64.tar.gz</span><br><span class="line">tar zxvf gogs_v0.9.141_linux_amd64.tar.gz</span><br><span class="line">mv gogs /usr/<span class="built_in">local</span>/gogs</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/gogs</span><br><span class="line">./gogs web</span><br></pre></td></tr></table></figure><p>创建gogs服务并设置成开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/gogs.service</span><br><span class="line">&lt;i&gt;&lt;Paste&gt;</span><br><span class="line">[Unit]</span><br><span class="line">Description=Gogs (Go Git Service)</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line">#After=mysqld.service</span><br><span class="line">#After=postgresql.service</span><br><span class="line">#After=memcached.service</span><br><span class="line">#After=redis.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"># Modify these two values and uncomment them if you have</span><br><span class="line"># repos with lots of files and get an HTTP error 500 because</span><br><span class="line"># of that</span><br><span class="line">###</span><br><span class="line">#LimitMEMLOCK=infinity</span><br><span class="line">#LimitNOFILE=65535</span><br><span class="line">#Type=forking</span><br><span class="line">User=www</span><br><span class="line">Group=www</span><br><span class="line">WorkingDirectory=/usr/local/gogs</span><br><span class="line">ExecStart=/usr/local/gogs/gogs web</span><br><span class="line">Restart=always</span><br><span class="line">Environment=USER=www HOME=/home/www</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">&lt;/Paste&gt;</span><br><span class="line">&lt;Esc&gt;&lt;:&gt;&lt;x&gt;&lt;Enter&gt;</span><br><span class="line">systemctl enable gogs</span><br><span class="line">systemctl start gogs</span><br></pre></td></tr></table></figure></p><h3 id="配置自动部署博客"><a href="#配置自动部署博客" class="headerlink" title="配置自动部署博客"></a>配置自动部署博客</h3><h4 id="新建项目并提交"><a href="#新建项目并提交" class="headerlink" title="新建项目并提交"></a>新建项目并提交</h4><p>把本地的博客git更换新地址并提交到gogs。</p><h4 id="测试并添加githook"><a href="#测试并添加githook" class="headerlink" title="测试并添加githook"></a>测试并添加githook</h4><p>先克隆一个用于生成网站的本地仓库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="variable">$&#123;REMOTE_REP&#125;</span> <span class="variable">$&#123;BLOG_GENERATE_REP&#125;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BLOG_GENERATE_REP&#125;</span></span><br><span class="line">npm install hexo --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-pagination --save</span><br><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure></p><p>在仓库设置里添加post-receive的钩子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash -l</span></span><br><span class="line"><span class="built_in">unset</span> $(git rev-parse --<span class="built_in">local</span>-env-vars)</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"/usr/local/nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">nvm use --lts</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BLOG_GENERATE_REP&#125;</span></span><br><span class="line">git pull</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">rm -rf <span class="variable">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class="line">cp -rf <span class="variable">$&#123;GENERATED_PUBLIC&#125;</span>/* <span class="variable">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure></p><p>提交新文件就会更新博客网站了。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>完毕撒花~睡觉~</p>]]></content>
      
      <categories>
          
          <category> vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> centos </tag>
            
            <tag> blogs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为Windows10 Bash添加右键菜单“Bash Here”</title>
      <link href="/windows10-bash-here/"/>
      <url>/windows10-bash-here/</url>
      <content type="html"><![CDATA[<p>最近更新了Windows10一周年版，那么Bash肯定要拿来试试了。经过体验后，可以明确这个东东就是一个Ubuntu，自带的默认sh是dash。那么如果我们想随时随地使用他，就像git-bash右键菜单那样简单，应该怎么做呢？<br>新建一个文本文件，文件名改成*.reg，用文本编辑器编辑它，添加如下内容：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\Bash]</span><br><span class="line">@=&quot;Bash Here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\Bash\command]</span><br><span class="line">@=&quot;cmd /s /k \&quot;pushd %v &amp;&amp; bash\&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Bash]</span><br><span class="line">@=&quot;Bash Here&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\Bash\command]</span><br><span class="line">@=&quot;cmd /s /k \&quot;pushd %v &amp;&amp; bash\&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>保存后双击导入即可，现在我们可以在任意文件夹空白地区和文件夹右键看到我们的右键菜单“Bash Here”了。</p>]]></content>
      
      <categories>
          
          <category> windows10 </category>
          
          <category> regedit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> bash </tag>
            
            <tag> regedit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【UE4】根据路径动态加载蓝图类的正确方式</title>
      <link href="/ue4-dynamic-load-blueprint-class-from-path/"/>
      <url>/ue4-dynamic-load-blueprint-class-from-path/</url>
      <content type="html"><![CDATA[<p>由于要在脚本里实现根据路径动态加载蓝图类，我添加了一个胶水方法。思路是加载一个蓝图文件，然后获取到其GeneratedClass。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> BP = Cast&lt;UBlueprint&gt;(StaticLoadObject(UBlueprint::StaticClass(), <span class="literal">nullptr</span>, *Path));</span><br><span class="line">UClass* Class =  BP ? BP-&gt;GeneratedClass : <span class="literal">nullptr</span></span><br></pre></td></tr></table></figure></p><p>这个方法在桌面平台PIE的情况下没有什么问题，直到我们cook资源后，在移动平台上测试才出现了错误。因为，cook过的资源是没有蓝图对象的。</p><a id="more"></a><p>那么我们需要换一种写法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UClass* Class = Cast&lt;UClass&gt;(StaticLoadObject(UClass::StaticClass(), <span class="literal">nullptr</span>, *Path));</span><br></pre></td></tr></table></figure></p><p>这样一来，配置的路径也要相应的从<br><code>/Game/YOURDIR/BP_SomeBlueprint.BP_SomeBlueprint</code><br>改成<br><code>/Game/YOURDIR/BP_SomeBlueprint.BP_SomeBlueprint_C</code>。</p><p>当然还有一种糟糕的方式：修改<code>DefaultEditor.ini</code><br>将<code>bDontLoadBlueprintOutsideEditor=true</code>改成<code>false</code><br>这种方式的本质是使cook过的资源也保留蓝图部分，会影响包大小，因此极其不推荐。</p>]]></content>
      
      <categories>
          
          <category> ue4 </category>
          
          <category> asset </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ue4 </tag>
            
            <tag> blueprint </tag>
            
            <tag> load </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Let’s Encrypt! 为博客开启https</title>
      <link href="/lets-encrypt/"/>
      <url>/lets-encrypt/</url>
      <content type="html"><![CDATA[<p>看过<span class="exturl" data-url="aHR0cDovL3poaWd1YW5nLm1lLzIwMTYvMDMvMjEvbGV0cy1lbmNyeXB0Lw==" title="http://zhiguang.me/2016/03/21/lets-encrypt/">之光的文章<i class="fa fa-external-link"></i></span>后，跃跃欲试，实践后整理了nginx的部分。<br>运行环境如下：</p><ul><li>cat /etc/redhat-release &gt; CentOS Linux release 7.2.1511 (Core)</li><li>nginx -v &gt; nginx version: openresty/1.9.15.1</li><li>blog &gt; hexo</li></ul><a id="more"></a><h2 id="用git下载客户端并安装依赖："><a href="#用git下载客户端并安装依赖：" class="headerlink" title="用git下载客户端并安装依赖："></a>用git下载客户端并安装依赖：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/letsencrypt/letsencrypt</span><br><span class="line"><span class="built_in">cd</span> letsencrypt</span><br><span class="line">./letsencrypt-auto --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="开始申请"><a href="#开始申请" class="headerlink" title="开始申请"></a>开始申请</h2><p>申请证书时客户端需要使用80和443端口，因此先停掉nginx：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure></p><p>申请证书：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./letsencrypt-auto certonly --standalone</span><br></pre></td></tr></table></figure></p><p>按照屏幕提示依次输入联系email、同意Terms of Service、输入域名。</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>编辑nginx.conf <code>/usr/local/nginx/conf/vhost/blog.walkcd.com.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line"></span><br><span class="line">        server_name blog.walkcd.com; #替换成自己的域名</span><br><span class="line">        index index.html;</span><br><span class="line">        root  /home/www/blog.walkcd.com;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/blog.walkcd.com/fullchain.pem; # 替换成自己的证书和密钥</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/blog.walkcd.com/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_dhparam /home/www/dhparam.pem;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line"></span><br><span class="line">        # 重定向到https</span><br><span class="line">        if ($server_port = 80)&#123;</span><br><span class="line">        return 301 https://$server_name$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        if ($scheme = http)&#123;</span><br><span class="line">            return 301 https://$server_name$request_uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    error_page 497 https://$server_name$request_uri;</span><br><span class="line"></span><br><span class="line">    error_page   404   /404.html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重新启动nginx<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></p><h2 id="自动续期证书"><a href="#自动续期证书" class="headerlink" title="自动续期证书"></a>自动续期证书</h2><p>由于Let’s Encrypt的证书有效期只有90天，因此编写一个脚本自动地renew证书：<code>letsencrypt_renew.sh</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line">/home/www/letsencrypt/letsencrypt-auto renew --force-renew</span><br><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure></p><p>编辑crontab，每月1日自动调用脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * /home/www/letsencrypt/renew.sh &gt;&gt; /home/www/logs/letsencrypt_renew.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>这样就大功告成了。</p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> letsencrypt </tag>
            
            <tag> ssl </tag>
            
            <tag> https </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>将VPS系统切换到CentOS7</title>
      <link href="/change-vps-os-to-centos-7/"/>
      <url>/change-vps-os-to-centos-7/</url>
      <content type="html"><![CDATA[<p>纠结了很久，终于决定和CentOS6说拜拜，主要还是对新的systemd比较感兴趣，确实使用起来很方便。同时也是彻底抛弃WordPress的时候了，这个庞然大物用起来越发的觉得不痛快了。主要原因还是并不能原生支持纯粹的Markdown写作，而团队已经开始大量使用Markdown来撰写文档了。<br><a id="more"></a></p><h2 id="切换过程"><a href="#切换过程" class="headerlink" title="切换过程"></a>切换过程</h2><p>切换之前当然要对之前博客里的数据做个备份了，直接设置里导出XML完事，图片都不要了（主要还是因为懒得搞）。</p><h3 id="VPS-ChangeOS"><a href="#VPS-ChangeOS" class="headerlink" title="VPS ChangeOS"></a>VPS ChangeOS</h3><p>直接在VPS后台ChangeOS即可，数据会被清空，一般5分钟内搞定，就可以登录开始配置了。</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q96Ieq5bex5Yqo5omL5Liw6KGj6Laz6aOf" title="https://www.baidu.com/s?wd=自己动手丰衣足食">shadowsocks<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cDovL29wZW5yZXN0eS5vcmcvZW4v" title="http://openresty.org/en/">openresty<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdC9naXQ=" title="https://github.com/git/git">git<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">nodejs<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">hexo<i class="fa fa-external-link"></i></span></li></ul><h3 id="额外优化和安全配置"><a href="#额外优化和安全配置" class="headerlink" title="额外优化和安全配置"></a>额外优化和安全配置</h3><ul><li>添加用户</li><li>修改ssh端口，禁止root用密码登录</li><li>添加swap空间大小</li></ul><h2 id="初探systemd"><a href="#初探systemd" class="headerlink" title="初探systemd"></a>初探systemd</h2><p>CentOS 7 使用systemd替换了SysV。Systemd目的是要取代Unix时代以来一直在使用的init系统。systemd的特性有：</p><ul><li>支持并行化任务</li><li>同时采用socket式与D-Bus总线式激活服务</li><li>按需启动守护进程（daemon）</li><li>利用 Linux 的 cgroups 监视进程</li><li>支持快照和系统恢复</li><li>维护挂载点和自动挂载点</li><li>各服务间基于依赖关系进行精密控制</li></ul><p>检视和控制systemd的主要命令是systemctl。该命令可用于查看系统状态和管理系统及服务。详见man systemctl。</p><h3 id="systemctl常见用法"><a href="#systemctl常见用法" class="headerlink" title="systemctl常见用法"></a>systemctl常见用法</h3><p>复杂的用法我们一般也用不着，就列几个常用的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 立即激活service：</span></span><br><span class="line">  systemctl start <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 立即停止service：</span></span><br><span class="line">  systemctl stop <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 重启service：</span></span><br><span class="line">  systemctl restart <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 命令service重新读取配置：</span></span><br><span class="line">  systemctl reload <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 输出service运行状态：</span></span><br><span class="line">  systemctl status <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 检查service是否配置为自动启动：</span></span><br><span class="line">  systemctl is-enabled <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 开机自动激活service：</span></span><br><span class="line">  systemctl <span class="built_in">enable</span> <span class="variable">$service_name</span></span><br><span class="line"><span class="comment"># 取消开机自动激活service：</span></span><br><span class="line">  systemctl <span class="built_in">disable</span> <span class="variable">$service_name</span></span><br></pre></td></tr></table></figure><h3 id="添加自己的service"><a href="#添加自己的service" class="headerlink" title="添加自己的service"></a>添加自己的service</h3><p>CentOS 7的服务systemctl脚本存放在：<code>/usr/lib/systemd/</code>，有系统（system）和用户（user）之分，像需要开机不登陆就能运行的程序，还是存在系统服务里吧。即：<code>/usr/lib/systemd/system</code>目录下<br>每一个服务以.service结尾，一般会分为3部分：[Unit]、[Service]和[Install]。</p><p>以nginx为例，我的nginx版本是openresty源码编译的，因此没有自带service配置，我们可以自己写一个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Nginx an HTTP and reverse proxy server.</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/nginx</span><br><span class="line">ExecStop=/usr/local/bin/nginx -s stop</span><br><span class="line">ExecReload=/usr/local/bin/nginx -s reload</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>具体解释请看<span class="exturl" data-url="aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLVVTL1JlZF9IYXRfRW50ZXJwcmlzZV9MaW51eC83L2h0bWwvU3lzdGVtX0FkbWluaXN0cmF0b3JzX0d1aWRlL2NoYXAtTWFuYWdpbmdfU2VydmljZXNfd2l0aF9zeXN0ZW1kLmh0bWw=" title="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/chap-Managing_Services_with_systemd.html">文档<i class="fa fa-external-link"></i></span>。从以上示例可以发现，我们无需再自己重复编写繁琐的init.d脚本，还是很方便的。</p><h2 id="FireWall的常见用法"><a href="#FireWall的常见用法" class="headerlink" title="FireWall的常见用法"></a>FireWall的常见用法</h2><p>之前的防火墙用的是iptables，每次设置还得找教程，CentOS7默认使用firewalld作防火墙。<br>添加ssh端口，https端口都要用到，正好简单学习下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放端口</span></span><br><span class="line">  firewall-cmd --add-port=1234/tcp</span><br><span class="line"><span class="comment"># 关闭端口</span></span><br><span class="line">  firewall-cmd --remove-port=1234/tcp</span><br><span class="line"><span class="comment"># 永久开放端口</span></span><br><span class="line">  firewall-cmd --add-port=443/tcp --permanent</span><br><span class="line"><span class="comment"># 重新加载配置使其立即生效</span></span><br><span class="line">  firewall-cmd --reload</span><br><span class="line"><span class="comment"># 查看当前配置</span></span><br><span class="line">  firewall-cmd --list-all</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
          <category> centos7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为Lua添加std::function交互支持</title>
      <link href="/add-stdfunction-interactive-support-for-lua/"/>
      <url>/add-stdfunction-interactive-support-for-lua/</url>
      <content type="html"><![CDATA[<p>我们常用的事件等机制需要设置回调函数，在C++中比较方便的是std::function配合lambda使用。当我们使用lua进行脚本化的时候，lua和C++交互便会遇到这样的问题，那么如何在lua脚本中设置和获取std::function作为变量呢？要解决这个问题，我们需要搞定两个方向——Lua-&gt;C++和 C++-&gt;Lua。</p><a id="more"></a><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="Lua-gt-C"><a href="#Lua-gt-C" class="headerlink" title="Lua-&gt;C++"></a>Lua-&gt;C++</h3><p>假如我们有一个回调函数需要设置<code>std::function&lt;void(int)&gt;</code> 该函数在Lua中可能是这样的：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(tag)</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tag is :"</span> .. tag)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>它是一个Lua函数，我们可以在Lua栈中获取到它，那么如果我需要在以后调用它，我可以使用<span class="s1">luaL_ref将其注册，在需要调用的时候获取到它的引用，并使用</span><span class="s1">lua_pcall调用它。这样一来思路就清晰了，我们只需要使用lambda表达式构造出一个std::function，内容就是获取到这个Lua function并调用，在这个过程中使用lambda捕获Lua function的引用id，并在function销毁时进行解引用。</span></p><h3 id="C-gt-Lua"><a href="#C-gt-Lua" class="headerlink" title="C++-&gt;Lua"></a>C++-&gt;Lua</h3><p>如果是一个std::function压入Lua栈呢，我们可以简单的使用userdata进行储存，使用<span class="s1">lua_newuserdata开一块内存，将std::function拷贝进去，设置好元表，这样就完成了压入栈的操作。</span></p><h3 id="C-gt-Lua-gt-C"><a href="#C-gt-Lua-gt-C" class="headerlink" title="C++-&gt;Lua-&gt;C++"></a>C++-&gt;Lua-&gt;C++</h3><p>通过2存入std::function这样问题又来了，传进来的参数有可能是一个function也有可能是一个userdata，我们需要对其分别处理，如果是function，使用lambda进行转换，如果是userdata，直接还原内存。</p><p>经过上面的分析，我们可以实现其以下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionTransfer</span> &#123;</span></span><br><span class="line">    lua_State *state;</span><br><span class="line">    <span class="keyword">int</span> ref;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FunctionTransfer(lua_State *L, <span class="keyword">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        state = L;</span><br><span class="line">        ref = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (state) &#123;</span><br><span class="line">            lua_pushvalue(state, index);</span><br><span class="line">            ref = luaL_ref(state, LUA_REGISTRYINDEX);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> R , <span class="keyword">typename</span>... P&gt;</span><br><span class="line">    static void create(lua_State *L, int index, std::function&lt;R(P...)&gt; &amp;func)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> auf = <span class="built_in">std</span>::make_shared&lt;FunctionTransfer&gt;(L, index);</span><br><span class="line">        func = [auf](P... p)-&gt;R&#123;</span><br><span class="line">            lua_State *L = auf-&gt;getState();</span><br><span class="line">            lua_rawgeti(L, LUA_REGISTRYINDEX, auf-&gt;getRef());</span><br><span class="line">            <span class="keyword">int</span> nargs = pushArgs(L, p...);</span><br><span class="line">            lua_pcall(L, nargs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> Stack&lt;R&gt;::get(L, <span class="number">-1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> R = <span class="keyword">void</span>, <span class="keyword">typename</span>... P&gt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> create(lua_State *L, <span class="keyword">int</span> index, <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(P...)&gt; &amp;func)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> auf = <span class="built_in">std</span>::make_shared&lt;FunctionTransfer&gt;(L, index);</span><br><span class="line">        func = [auf](P... p)-&gt;<span class="keyword">void</span>&#123;</span><br><span class="line">            lua_State *L = auf-&gt;getState();</span><br><span class="line">            lua_rawgeti(L, LUA_REGISTRYINDEX, auf-&gt;getRef());</span><br><span class="line">            <span class="keyword">int</span> nargs = pushArgs(L, p...);</span><br><span class="line">            lua_pcall(L, nargs, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span>... P&gt;</span><br><span class="line">    static void create(lua_State *L, int index, std::function&lt;void(void)&gt; &amp;func)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> auf = <span class="built_in">std</span>::make_shared&lt;FunctionTransfer&gt;(L, index);</span><br><span class="line">        func = [auf]()-&gt;<span class="keyword">void</span>&#123;</span><br><span class="line">            lua_State *L = auf-&gt;getState();</span><br><span class="line">            lua_rawgeti(L, LUA_REGISTRYINDEX, auf-&gt;getRef());</span><br><span class="line">            lua_pcall(L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> FT&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(lua_State *L, <span class="keyword">int</span> index, <span class="built_in">std</span>::function&lt;FT&gt; &amp;func)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lua_isfunction(L, index))</span><br><span class="line">        &#123;</span><br><span class="line">            create(L, index, func);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (lua_isuserdata(L, index))</span><br><span class="line">        &#123;</span><br><span class="line">            func = (<span class="keyword">decltype</span>(func)(*luaL_checkudata(L, index, <span class="keyword">typeid</span>(func).name())));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            luaL_checktype(L, index, LUA_TFUNCTION);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRef</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> ref;&#125;</span><br><span class="line">    <span class="function">lua_State* <span class="title">getState</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> state;&#125;</span><br><span class="line"></span><br><span class="line">    ~FunctionTransfer()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (state) &#123;</span><br><span class="line">            luaL_unref(state, LUA_REGISTRYINDEX, ref);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> FT&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &lt;std::function&lt;FT&gt; &gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span> <span class="params">(lua_State* L, <span class="built_in">std</span>::function&lt;FT&gt; func)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> (lua_newuserdata(L, <span class="keyword">sizeof</span>(func))) <span class="built_in">std</span>::function&lt;FT&gt;(func);</span><br><span class="line">        luaL_newmetatable(L, <span class="keyword">typeid</span>(func).name());</span><br><span class="line">        lua_setmetatable(L, <span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">std</span>::function&lt;FT&gt; get (lua_State* L, <span class="keyword">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::function&lt;FT&gt; func;</span><br><span class="line">        FunctionTransfer::get(L, index, func);</span><br><span class="line">        <span class="keyword">return</span> func;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h2><p>这里的std::function的userdata的metatable是没有实现__call方法的，因此实际上在lua层并不能调用这个方法。有需要的话可以自行实现。</p>]]></content>
      
      <categories>
          
          <category> programming language </category>
          
          <category> c/c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> lua </tag>
            
            <tag> luabridge </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
